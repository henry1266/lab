<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÁóÖÊÇ£Â†±Âëä - <%= patient.patnm || '(ÁÑ°Âêç)' %> (<%= patient.idno %>)</title>
    <style>
        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
        .container { max-width: 1000px; margin: auto; background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        h2, h3 { color: #333; }
        .category-title {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            margin-bottom: 0px;
            border-radius: 4px 4px 0 0;
            cursor: pointer;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }
        .category-title:hover {
            background-color: #0056b3;
        }
        .category-content {
            display: block; /* Categories are expanded by default */
            border: 1px solid #007bff;
            border-top: none;
            padding: 15px;
            border-radius: 0 0 4px 4px;
            margin-bottom: 20px;
            overflow-x: auto; /* For wider tables */
        }
        .toggle-icon { font-size: 1.2em; }
        .back-link { display: inline-block; margin-top: 20px; }

        table.comparison-table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 10px;
            box-shadow: 0 2px 3px rgba(0,0,0,0.1);
        }
        table.comparison-table th, table.comparison-table td {
            border: 1px solid #ddd;
            text-align: left;
            padding: 10px;
            vertical-align: middle;
        }
        table.comparison-table th {
            background-color: #6c757d; 
            color: white;
            font-weight: bold;
            white-space: nowrap;
        }
        table.comparison-table tr:nth-child(even) { background-color: #f9f9f9; }
        table.comparison-table strong { font-weight: bold; }
        .no-data { color: #999; font-style: italic; text-align: center;}
    </style>
</head>
<body>
    <div class="container">
        <% if (patient && records && records.length > 0) { %>
            <h2><%= patient.patnm || '(ÁÑ°Âêç)' %> (<%= patient.idno %>)</h2>
            <p>ÁîüÊó•Ôºö<%= patient.birdt %></p>
            <h3>ÂÖ± <%= records.length %> Á≠ÜÂ†±Âëä - Ê©´ÂêëÂ∞çÊØî</h3>

            <% 
            const orderedCategories = [
                "Ë°ÄËÑÇËÇ™Ê™¢Êü•", "Á≥ñÂ∞øÁóÖÊ™¢Êü•", "ËÖéÂäüËÉΩ", "ËÇùÂäüËÉΩ", 
                "Ë°ÄÊ∂≤Ê™¢Êü•", "Â∞øÊ∂≤Ê™¢Êü•", "Á≥û‰æøÊ™¢Êü•", "ÂÖ∂‰ªñÊ™¢Êü•"
            ];

            // Get all unique report dates, sorted most recent first
            const allReportDates = [...new Set(records.map(r => r.rptdt))].sort((a, b) => new Date(b.split('/').join('-')) - new Date(a.split('/').join('-')));

            orderedCategories.forEach(categoryName => {
                // Collect all unique items for this category across all reports
                const uniqueItemsInCategory = new Set();
                const itemDetailsMap = new Map(); // To store details like normal range for each item

                records.forEach(r => {
                    if (r.categorizedItems && r.categorizedItems[categoryName]) {
                        r.categorizedItems[categoryName].forEach(item => {
                            uniqueItemsInCategory.add(item.itmnm);
                            if (!itemDetailsMap.has(item.itmnm)) {
                                let rangeStr = item.refrg || '-';
                                if (rangeStr === '-' && (item.nlow || item.nhigh)) {
                                    if (item.nlow && item.nhigh) rangeStr = `${item.nlow} ~ ${item.nhigh}`;
                                    else if (item.nlow) rangeStr = `‚â• ${item.nlow}`;
                                    else if (item.nhigh) rangeStr = `‚â§ ${item.nhigh}`;
                                }
                                itemDetailsMap.set(item.itmnm, { 
                                    unit: item.rstunit || '',
                                    range: rangeStr,
                                    // Store one example of nlow/nhigh for generic comparison if needed
                                    nlow: item.nlow,
                                    nhigh: item.nhigh
                                });
                            }
                        });
                    }
                });

                if (uniqueItemsInCategory.size > 0) { %>
                    <div class="category-section">
                        <div class="category-title" onclick="toggleCategory(this)">
                            <span><%= categoryName %></span>
                            <span class="toggle-icon category-toggle-icon">-</span>
                        </div>
                        <div class="category-content open">
                            <table class="comparison-table">
                                <thead>
                                    <tr>
                                        <th>Ê™¢Êü•È†ÖÁõÆ</th>
                                        <th>Ê≠£Â∏∏ÁØÑÂúç</th>
                                        <% allReportDates.forEach(date => { %>
                                            <th><%= date %></th>
                                        <% }); %>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% Array.from(uniqueItemsInCategory).sort().forEach(itemName => { %>
                                        <% const details = itemDetailsMap.get(itemName); %>
                                        <tr>
                                            <td><%= itemName || '(ÁÑ°È†ÖÁõÆ)' %></td>
                                            <td><%= details.range %></td>
                                            <% allReportDates.forEach(reportDate => { %>
                                                <% 
                                                    let cellContent = '‚Äî';
                                                    let statusSymbol = '';
                                                    let resultDisplay = '‚Äî';

                                                    const reportForDate = records.find(r => r.rptdt === reportDate);
                                                    let itemInReport = null;
                                                    if (reportForDate && reportForDate.categorizedItems && reportForDate.categorizedItems[categoryName]) {
                                                        itemInReport = reportForDate.categorizedItems[categoryName].find(i => i.itmnm === itemName);
                                                    }

                                                    if (itemInReport) {
                                                        resultDisplay = itemInReport.result || '‚Äî';
                                                        const resultNum = parseFloat(itemInReport.result);
                                                        const nlowNum = parseFloat(itemInReport.nlow);
                                                        const nhighNum = parseFloat(itemInReport.nhigh);

                                                        // Specific logic from user example
                                                        if (itemName === 'HDL Cholesterol') {
                                                            if (!isNaN(resultNum)) {
                                                                if (resultNum >= 40) statusSymbol = (resultNum >= 42.5) ? 'üü¢' : 'üü°';
                                                                else statusSymbol = 'üî¥';
                                                                if (resultNum === 45 || resultNum === 42) resultDisplay = `<strong>${itemInReport.result}</strong>`; 
                                                            }
                                                        } else if (itemName === 'Triglyceride') {
                                                            if (!isNaN(resultNum)) {
                                                                if (resultNum >= 30 && resultNum <= 150) statusSymbol = 'üü¢';
                                                                else statusSymbol = 'üî¥';
                                                                if (resultNum === 136 || resultNum === 138) resultDisplay = `<strong>${itemInReport.result}</strong>`;
                                                            }
                                                        } else if (itemName === 'LDL Cholesterol') {
                                                            if (!isNaN(resultNum)) {
                                                                if (resultNum >= 20 && resultNum <= 130) statusSymbol = 'üü¢';
                                                                else statusSymbol = 'üî¥';
                                                                if (resultNum === 64 || resultNum === 67) resultDisplay = `<strong>${itemInReport.result}</strong>`;
                                                            }
                                                        } else if (itemName === 'HbA1c') {
                                                            if (itemInReport.result) { // HbA1c might be a string like "6.6%"
                                                                const hba1cVal = parseFloat(itemInReport.result.replace('%',''));
                                                                if (!isNaN(hba1cVal)){
                                                                    if (hba1cVal >= 4.0 && hba1cVal <= 5.6) statusSymbol = 'üü¢';
                                                                    else statusSymbol = 'üî¥';
                                                                    if (itemInReport.result === '6.6%' || itemInReport.result === '6.9%') resultDisplay = `<strong>${itemInReport.result}</strong>`;
                                                                }
                                                            }
                                                        } else { // Generic status logic
                                                            if (!isNaN(resultNum) && !isNaN(nlowNum) && !isNaN(nhighNum)) {
                                                                if (resultNum < nlowNum) statusSymbol = 'üî¥';
                                                                else if (resultNum > nhighNum) statusSymbol = 'üî¥';
                                                                else statusSymbol = 'üü¢';
                                                            }
                                                        }
                                                        cellContent = `<%- resultDisplay %> ${itemInReport.rstunit || ''} ${statusSymbol}`;
                                                    } else {
                                                        cellContent = '‚Äî';
                                                    }
                                                %>
                                                <td><%- cellContent %></td>
                                            <% }); %>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                <% } else { %>
                    <!-- Optional: message if category has no items across all reports -->
                <% } %>
            <% }); %>
        <% } else if (patient) { %>
             <h2><%= patient.patnm || '(ÁÑ°Âêç)' %> (<%= patient.idno %>)</h2>
             <p>ÁîüÊó•Ôºö<%= patient.birdt %></p>
             <p class="no-data">Ê≠§ÁóÖÊÇ£Â∞öÁÑ°Â†±ÂëäÂèØ‰æõÂ∞çÊØî„ÄÇ</p>
        <% } else { %>
            <p class="no-data">Êâæ‰∏çÂà∞ÁóÖÊÇ£Ë≥áÊñô„ÄÇ</p>
        <% } %>
        <a href="/" class="back-link">‚Üê ÂõûÈ¶ñÈ†Å</a>
    </div>

    <script>
        function toggleCategory(element) {
            const content = element.nextElementSibling;
            const icon = element.querySelector('.category-toggle-icon');
            if (content.style.display === "none" || !content.classList.contains('open')) {
                content.style.display = "block";
                content.classList.add('open');
                icon.textContent = "-";
            } else {
                content.style.display = "none";
                content.classList.remove('open');
                icon.textContent = "+";
            }
        }
    </script>
</body>
</html>
