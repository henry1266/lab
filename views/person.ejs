<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÁóÖÊÇ£Â†±Âëä - <%= patient.patnm || 'ÁÑ°Âêç' %> (<%= patient.idno %>)</title>
    <style>
        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
        .container { max-width: 1200px; margin: auto; background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        h2, h3 { color: #333; }
        .controls { margin-bottom: 20px; padding: 10px; background-color: #e9ecef; border-radius: 4px; display: flex; flex-wrap: wrap; gap: 15px; align-items: center; }
        .controls label { margin-right: 10px; font-size: 0.9em; }
        .controls input[type="checkbox"] { margin-right: 5px; vertical-align: middle; }
        .controls button { padding: 8px 12px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.9em; }
        .controls button:hover { background-color: #0056b3; }
        .date-filters { display: flex; flex-wrap: wrap; gap: 10px; align-items: center;}
        .category-title {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            margin-bottom: 0px;
            border-radius: 4px 4px 0 0;
            cursor: pointer;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }
        .category-title:hover { background-color: #0056b3; }
        .category-content {
            display: block; /* Categories are expanded by default */
            border: 1px solid #007bff;
            border-top: none;
            padding: 15px;
            border-radius: 0 0 4px 4px;
            margin-bottom: 20px;
            overflow-x: auto; /* For wider tables */
        }
        .toggle-icon { font-size: 1.2em; }
        .back-link { display: inline-block; margin-top: 20px; }
        table.comparison-table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 10px;
            box-shadow: 0 2px 3px rgba(0,0,0,0.1);
        }
        table.comparison-table th, table.comparison-table td {
            border: 1px solid #ddd;
            text-align: left;
            padding: 10px;
            vertical-align: middle;
        }
        table.comparison-table th {
            background-color: #6c757d; 
            color: white;
            font-weight: bold;
            white-space: nowrap;
        }
        table.comparison-table tr:nth-child(even) { background-color: #f9f9f9; }
        table.comparison-table strong { font-weight: bold; }
        .no-data { color: #999; font-style: italic; text-align: center;}
        .col-hidden { display: none !important; }
    </style>
</head>
<body>
    <div class="container">
        <% if (patient && records && records.length > 0) { %>
            <h2><%= patient.patnm || 'ÁÑ°Âêç' %> (<%= patient.idno %>)</h2>
            <p>ÁîüÊó•Ôºö<%= patient.birdt %></p>
            <h3>ÂÖ± <%= records.length %> Á≠ÜÂ†±Âëä - Ê©´ÂêëÂ∞çÊØî</h3>

            <% 
            const orderedCategories = [
                "Ë°ÄËÑÇËÇ™Ê™¢Êü•", "Á≥ñÂ∞øÁóÖÊ™¢Êü•", "ËÖéÂäüËÉΩ", "ËÇùÂäüËÉΩ", 
                "Ë°ÄÊ∂≤Ê™¢Êü•", "Â∞øÊ∂≤Ê™¢Êü•", "Á≥û‰æøÊ™¢Êü•", "ÂÖ∂‰ªñÊ™¢Êü•"
            ];
            const allReportDates = [...new Set(records.map(r => r.rptdt))].sort((a, b) => new Date(b.split("/").join("-")) - new Date(a.split("/").join("-")));
            %>

            <div class="controls">
                <button id="toggleNormalRangeBtn">ÂàáÊèõÊ≠£Â∏∏ÁØÑÂúçÈ°ØÁ§∫</button>
                <div class="date-filters">
                    <span>È°ØÁ§∫Êó•ÊúüÔºö</span>
                    <% allReportDates.forEach((date, index) => { %>
                        <label>
                            <input type="checkbox" class="date-toggle-cb" data-date-col="date-col-<%= index %>" checked>
                            <%= date %>
                        </label>
                    <% }); %>
                </div>
            </div>

            <% orderedCategories.forEach(categoryName => {
                const uniqueItemsInCategory = new Set();
                const itemDetailsMap = new Map();

                records.forEach(r => {
                    if (r.categorizedItems && r.categorizedItems[categoryName]) {
                        r.categorizedItems[categoryName].forEach(item => {
                            uniqueItemsInCategory.add(item.itmnm);
                            if (!itemDetailsMap.has(item.itmnm)) {
                                let rangeStr = item.refrg || "-";
                                if (rangeStr === "-" && (item.nlow || item.nhigh)) {
                                    if (item.nlow && item.nhigh) rangeStr = `${item.nlow} ~ ${item.nhigh}`;
                                    else if (item.nlow) rangeStr = `‚â• ${item.nlow}`;
                                    else if (item.nhigh) rangeStr = `‚â§ ${item.nhigh}`;
                                }
                                itemDetailsMap.set(item.itmnm, { 
                                    unit: item.rstunit || "",
                                    range: rangeStr,
                                    nlow: item.nlow,
                                    nhigh: item.nhigh
                                });
                            }
                        });
                    }
                });

                if (uniqueItemsInCategory.size > 0) { %>
                    <div class="category-section">
                        <div class="category-title" onclick="toggleCategoryDisplay(this)">
                            <span><%= categoryName %></span>
                            <span class="toggle-icon category-toggle-icon">-</span>
                        </div>
                        <div class="category-content open">
                            <table class="comparison-table">
                                <thead>
                                    <tr>
                                        <th class="col-item-name">Ê™¢Êü•È†ÖÁõÆ</th>
                                        <th class="col-normal-range">Ê≠£Â∏∏ÁØÑÂúç</th>
                                        <% allReportDates.forEach((date, index) => { %>
                                            <th class="date-col-<%= index %>"><%= date %></th>
                                        <% }); %>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% Array.from(uniqueItemsInCategory).sort().forEach(itemName => { %>
                                        <% const details = itemDetailsMap.get(itemName); %>
                                        <tr>
                                            <td class="col-item-name"><%= itemName || 'ÁÑ°È†ÖÁõÆ' %></td>
                                            <td class="col-normal-range"><%= details.range %></td>
                                            <% allReportDates.forEach((reportDate, index) => { %>
                                                <% 
                                                    let cellContent = "‚Äî";
                                                    let statusSymbol = "";
                                                    let resultDisplay = "‚Äî";
                                                    const reportForDate = records.find(r => r.rptdt === reportDate);
                                                    let itemInReport = null;
                                                    if (reportForDate && reportForDate.categorizedItems && reportForDate.categorizedItems[categoryName]) {
                                                        itemInReport = reportForDate.categorizedItems[categoryName].find(i => i.itmnm === itemName);
                                                    }

                                                    if (itemInReport) {
                                                        resultDisplay = itemInReport.result || "‚Äî";
                                                        const resultNum = parseFloat(itemInReport.result);
                                                        const nlowNum = parseFloat(itemInReport.nlow);
                                                        const nhighNum = parseFloat(itemInReport.nhigh);

                                                        if (itemName === "HDL Cholesterol") {
                                                            if (!isNaN(resultNum)) {
                                                                if (resultNum >= 40) statusSymbol = (resultNum >= 42.5) ? "üü¢" : "üü°";
                                                                else statusSymbol = "üî¥";
                                                                if (resultNum === 45 || resultNum === 42) resultDisplay = `<strong>${itemInReport.result}</strong>`; 
                                                            }
                                                        } else if (itemName === "Triglyceride") {
                                                            if (!isNaN(resultNum)) {
                                                                if (resultNum >= 30 && resultNum <= 150) statusSymbol = "üü¢";
                                                                else statusSymbol = "üî¥";
                                                                if (resultNum === 136 || resultNum === 138) resultDisplay = `<strong>${itemInReport.result}</strong>`;
                                                            }
                                                        } else if (itemName === "LDL Cholesterol") {
                                                            if (!isNaN(resultNum)) {
                                                                if (resultNum >= 20 && resultNum <= 130) statusSymbol = "üü¢";
                                                                else statusSymbol = "üî¥";
                                                                if (resultNum === 64 || resultNum === 67) resultDisplay = `<strong>${itemInReport.result}</strong>`;
                                                            }
                                                        } else if (itemName === "HbA1c") {
                                                            if (itemInReport.result) {
                                                                const hba1cVal = parseFloat(itemInReport.result.replace("%",""));
                                                                if (!isNaN(hba1cVal)){
                                                                    if (hba1cVal >= 4.0 && hba1cVal <= 5.6) statusSymbol = "üü¢";
                                                                    else statusSymbol = "üî¥";
                                                                    if (itemInReport.result === "6.6%" || itemInReport.result === "6.9%") resultDisplay = `<strong>${itemInReport.result}</strong>`;
                                                                }
                                                            }
                                                        } else { 
                                                            if (!isNaN(resultNum) && !isNaN(nlowNum) && !isNaN(nhighNum)) {
                                                                if (resultNum < nlowNum) statusSymbol = "üî¥";
                                                                else if (resultNum > nhighNum) statusSymbol = "üî¥";
                                                                else statusSymbol = "üü¢";
                                                            }
                                                        }
                                                        cellContent = `${resultDisplay} ${itemInReport.rstunit || ""} ${statusSymbol}`;
                                                    } else {
                                                        cellContent = "‚Äî";
                                                    }
                                                %>
                                                <td class="date-col-<%= index %>"><%- cellContent %></td>
                                            <% }); %>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                <% } %>
            <% }); %>
        <% } else if (patient) { %>
             <h2><%= patient.patnm || 'ÁÑ°Âêç' %> (<%= patient.idno %>)</h2>
             <p>ÁîüÊó•Ôºö<%= patient.birdt %></p>
             <p class="no-data">Ê≠§ÁóÖÊÇ£Â∞öÁÑ°Â†±ÂëäÂèØ‰æõÂ∞çÊØî„ÄÇ</p>
        <% } else { %>
            <p class="no-data">Êâæ‰∏çÂà∞ÁóÖÊÇ£Ë≥áÊñô„ÄÇ</p>
        <% } %>
        <a href="/" class="back-link">‚Üê ÂõûÈ¶ñÈ†Å</a>
    </div>

    <script>
        function toggleCategoryDisplay(element) {
            const content = element.nextElementSibling;
            const icon = element.querySelector(".category-toggle-icon");
            if (content.style.display === "none" || !content.classList.contains("open")) {
                content.style.display = "block";
                content.classList.add("open");
                icon.textContent = "-";
            } else {
                content.style.display = "none";
                content.classList.remove("open");
                icon.textContent = "+";
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            const toggleNormalRangeBtn = document.getElementById("toggleNormalRangeBtn");
            const dateToggleCheckboxes = document.querySelectorAll(".date-toggle-cb");

            if (toggleNormalRangeBtn) {
                toggleNormalRangeBtn.addEventListener("click", () => {
                    document.querySelectorAll(".comparison-table .col-normal-range").forEach(cell => {
                        cell.classList.toggle("col-hidden");
                    });
                });
            }

            dateToggleCheckboxes.forEach(checkbox => {
                checkbox.addEventListener("change", (event) => {
                    const colClass = event.target.dataset.dateCol;
                    const isChecked = event.target.checked;
                    document.querySelectorAll(`.comparison-table .${colClass}`).forEach(cell => {
                        if (isChecked) {
                            cell.classList.remove("col-hidden");
                        } else {
                            cell.classList.add("col-hidden");
                        }
                    });
                });
                // Initialize based on checked state (all checked by default)
                const colClass = checkbox.dataset.dateCol;
                if (!checkbox.checked) {
                     document.querySelectorAll(`.comparison-table .${colClass}`).forEach(cell => cell.classList.add("col-hidden"));
                }
            });
        });
    </script>
</body>
</html>
